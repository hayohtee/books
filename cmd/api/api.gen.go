//go:build go1.22

// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BookResponse defines model for BookResponse.
type BookResponse struct {
	// CreatedAt The timestamp when the book was created
	CreatedAt time.Time `json:"created_at"`

	// Id The unique identifier for the book
	Id openapi_types.UUID `json:"id"`

	// Name The name of the book
	Name string `json:"name"`

	// UpdatedAt The timestamp when the book was updated
	UpdatedAt time.Time `json:"updated_at"`

	// UserId The unique identifier for the book owner
	UserId openapi_types.UUID `json:"user_id"`
}

// CreateBookRequest defines model for CreateBookRequest.
type CreateBookRequest struct {
	// Name The name of the book
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Message A human-readable error message
	Message string `json:"message"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field The name of the field that caused the validation error
	Field string `json:"field"`

	// Message The specific error message for the field
	Message string `json:"message"`
}

// ListBookResponse defines model for ListBookResponse.
type ListBookResponse struct {
	// Items A list of book
	Items    *[]BookResponse `json:"items,omitempty"`
	Metadata *Pagination     `json:"metadata,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email The email address of the user
	Email openapi_types.Email `json:"email"`

	// Password The password of the user
	Password string `json:"password"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage The current page number
	CurrentPage int `json:"current_page"`

	// PageSize The number of items per page
	PageSize int `json:"page_size"`

	// TotalItems The total number of items across all pages
	TotalItems int `json:"total_items"`

	// TotalPages The total number of pages
	TotalPages int `json:"total_pages"`
}

// RegistrationRequest defines model for RegistrationRequest.
type RegistrationRequest struct {
	// Email The email address of the user
	Email openapi_types.Email `json:"email"`

	// FirstName The first name of the user
	FirstName string `json:"first_name"`

	// LastName The last name of the user
	LastName string `json:"last_name"`

	// Password The password of the user
	Password string `json:"password"`
}

// ResendCodeRequest defines model for ResendCodeRequest.
type ResendCodeRequest struct {
	// Email The email address to which the new verification code should be sent
	Email openapi_types.Email `json:"email"`
}

// TokenRefreshRequest defines model for TokenRefreshRequest.
type TokenRefreshRequest struct {
	// RefreshToken The refresh token obtained during initial login or previous refresh
	RefreshToken string `json:"refresh_token"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// AccessToken The access token used for accessing protected resources
	AccessToken string `json:"access_token"`

	// ExpiresIn The lifetime in seconds of the access token
	ExpiresIn int `json:"expires_in"`

	// RefreshToken The refresh token used to obtain new access token
	RefreshToken string `json:"refresh_token"`

	// TokenType The type of token issued
	TokenType string `json:"token_type"`
}

// UpdateBookRequest defines model for UpdateBookRequest.
type UpdateBookRequest struct {
	// Name The name of the book
	Name string `json:"name"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// CreatedAt The timestamp when the user was created
	CreatedAt time.Time `json:"created_at"`

	// Email The email of the user
	Email openapi_types.Email `json:"email"`

	// FirstName The first name of the user
	FirstName string `json:"first_name"`

	// Id The unique identifier for the user
	Id openapi_types.UUID `json:"id"`

	// LastName The last name of the user
	LastName string `json:"last_name"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Errors A list of specific field validation errors
	Errors []FieldError `json:"errors"`

	// Message A human-readable summary of the overall error
	Message string `json:"message"`
}

// VerifyEmailRequest defines model for VerifyEmailRequest.
type VerifyEmailRequest struct {
	// Email The email address to be verified
	Email openapi_types.Email `json:"email"`

	// VerificationCode The 6-digit verification code received by the email
	VerificationCode string `json:"verification_code"`
}

// ListBookHandlerParams defines parameters for ListBookHandler.
type ListBookHandlerParams struct {
	Name     *string `form:"name,omitempty" json:"name,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// LoginUserHandlerJSONRequestBody defines body for LoginUserHandler for application/json ContentType.
type LoginUserHandlerJSONRequestBody = LoginRequest

// RegisterUserHandlerJSONRequestBody defines body for RegisterUserHandler for application/json ContentType.
type RegisterUserHandlerJSONRequestBody = RegistrationRequest

// ResendCodeHandlerJSONRequestBody defines body for ResendCodeHandler for application/json ContentType.
type ResendCodeHandlerJSONRequestBody = ResendCodeRequest

// VerifyEmailHandlerJSONRequestBody defines body for VerifyEmailHandler for application/json ContentType.
type VerifyEmailHandlerJSONRequestBody = VerifyEmailRequest

// CreateBookHandlerJSONRequestBody defines body for CreateBookHandler for application/json ContentType.
type CreateBookHandlerJSONRequestBody = CreateBookRequest

// UpdateBookHandlerJSONRequestBody defines body for UpdateBookHandler for application/json ContentType.
type UpdateBookHandlerJSONRequestBody = UpdateBookRequest

// RefreshTokenHandlerJSONRequestBody defines body for RefreshTokenHandler for application/json ContentType.
type RefreshTokenHandlerJSONRequestBody = TokenRefreshRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	LoginUserHandler(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/registration)
	RegisterUserHandler(w http.ResponseWriter, r *http.Request)
	// Resend email verification code
	// (POST /auth/resend-code)
	ResendCodeHandler(w http.ResponseWriter, r *http.Request)
	// Verify user email address
	// (POST /auth/verify-email)
	VerifyEmailHandler(w http.ResponseWriter, r *http.Request)
	// Retrieve all books that belongs to the user
	// (GET /books)
	ListBookHandler(w http.ResponseWriter, r *http.Request, params ListBookHandlerParams)
	// Create a new book
	// (POST /books)
	CreateBookHandler(w http.ResponseWriter, r *http.Request)
	// Delete a specific book that belongs to the user by ID
	// (DELETE /books/{id})
	DeleteBookHandler(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a specific book that belongs to the user by ID
	// (GET /books/{id})
	GetBookHandler(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a specific book that belongs to the user by ID
	// (PUT /books/{id})
	UpdateBookHandler(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Refresh access token
	// (POST /token/refresh)
	RefreshTokenHandler(w http.ResponseWriter, r *http.Request)
	// Get user profile by ID
	// (GET /users/{id})
	GetUserHandler(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// LoginUserHandler operation middleware
func (siw *ServerInterfaceWrapper) LoginUserHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUserHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RegisterUserHandler operation middleware
func (siw *ServerInterfaceWrapper) RegisterUserHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RegisterUserHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ResendCodeHandler operation middleware
func (siw *ServerInterfaceWrapper) ResendCodeHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ResendCodeHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// VerifyEmailHandler operation middleware
func (siw *ServerInterfaceWrapper) VerifyEmailHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.VerifyEmailHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListBookHandler operation middleware
func (siw *ServerInterfaceWrapper) ListBookHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListBookHandlerParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListBookHandler(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateBookHandler operation middleware
func (siw *ServerInterfaceWrapper) CreateBookHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateBookHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBookHandler operation middleware
func (siw *ServerInterfaceWrapper) DeleteBookHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBookHandler(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBookHandler operation middleware
func (siw *ServerInterfaceWrapper) GetBookHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBookHandler(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateBookHandler operation middleware
func (siw *ServerInterfaceWrapper) UpdateBookHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateBookHandler(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RefreshTokenHandler operation middleware
func (siw *ServerInterfaceWrapper) RefreshTokenHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RefreshTokenHandler(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUserHandler operation middleware
func (siw *ServerInterfaceWrapper) GetUserHandler(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserHandler(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.LoginUserHandler)
	m.HandleFunc("POST "+options.BaseURL+"/auth/registration", wrapper.RegisterUserHandler)
	m.HandleFunc("POST "+options.BaseURL+"/auth/resend-code", wrapper.ResendCodeHandler)
	m.HandleFunc("POST "+options.BaseURL+"/auth/verify-email", wrapper.VerifyEmailHandler)
	m.HandleFunc("GET "+options.BaseURL+"/books", wrapper.ListBookHandler)
	m.HandleFunc("POST "+options.BaseURL+"/books", wrapper.CreateBookHandler)
	m.HandleFunc("DELETE "+options.BaseURL+"/books/{id}", wrapper.DeleteBookHandler)
	m.HandleFunc("GET "+options.BaseURL+"/books/{id}", wrapper.GetBookHandler)
	m.HandleFunc("PUT "+options.BaseURL+"/books/{id}", wrapper.UpdateBookHandler)
	m.HandleFunc("POST "+options.BaseURL+"/token/refresh", wrapper.RefreshTokenHandler)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}", wrapper.GetUserHandler)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"WaShtcXl4v8BAAD//31tX0XZRgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
