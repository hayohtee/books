//go:build go1.22

// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package main

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BookResponse defines model for BookResponse.
type BookResponse struct {
	// CreatedAt The timestamp when the book was created
	CreatedAt time.Time `json:"created_at"`

	// Id The unique identifier for the book
	Id openapi_types.UUID `json:"id"`

	// Name The name of the book
	Name string `json:"name"`

	// UpdatedAt The timestamp when the book was updated
	UpdatedAt time.Time `json:"updated_at"`

	// UserId The unique identifier for the book owner
	UserId openapi_types.UUID `json:"user_id"`
}

// CreateBookRequest defines model for CreateBookRequest.
type CreateBookRequest struct {
	// Name The name of the book
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	// Message A human-readable error message
	Message string `json:"message"`
}

// FieldError defines model for FieldError.
type FieldError struct {
	// Field The name of the field that caused the validation error
	Field string `json:"field"`

	// Message The specific error message for the field
	Message string `json:"message"`
}

// ListBookResponse defines model for ListBookResponse.
type ListBookResponse struct {
	// Items A list of book
	Items    *[]BookResponse `json:"items,omitempty"`
	Metadata *Pagination     `json:"metadata,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	// Email The email address of the user
	Email openapi_types.Email `json:"email"`

	// Password The password of the user
	Password string `json:"password"`
}

// Pagination defines model for Pagination.
type Pagination struct {
	// CurrentPage The current page number
	CurrentPage int `json:"current_page"`

	// PageSize The number of items per page
	PageSize int `json:"page_size"`

	// TotalItems The total number of items across all pages
	TotalItems int `json:"total_items"`

	// TotalPages The total number of pages
	TotalPages int `json:"total_pages"`
}

// RegistrationRequest defines model for RegistrationRequest.
type RegistrationRequest struct {
	// Email The email address of the user
	Email openapi_types.Email `json:"email"`

	// FirstName The first name of the user
	FirstName string `json:"first_name"`

	// LastName The last name of the user
	LastName string `json:"last_name"`

	// Password The password of the user
	Password string `json:"password"`
}

// ResendCodeRequest defines model for ResendCodeRequest.
type ResendCodeRequest struct {
	// Email The email address to which the new verification code should be sent
	Email openapi_types.Email `json:"email"`
}

// TokenRefreshRequest defines model for TokenRefreshRequest.
type TokenRefreshRequest struct {
	// RefreshToken The refresh token obtained during initial login or previous refresh
	RefreshToken string `json:"refresh_token"`
}

// TokenResponse defines model for TokenResponse.
type TokenResponse struct {
	// AccessToken The access token used for accessing protected resources
	AccessToken string `json:"access_token"`

	// ExpiresIn The lifetime in seconds of the access token
	ExpiresIn int `json:"expires_in"`

	// RefreshToken The refresh token used to obtain new access token
	RefreshToken string `json:"refresh_token"`

	// TokenType The type of token issued
	TokenType string `json:"token_type"`
}

// UpdateBookRequest defines model for UpdateBookRequest.
type UpdateBookRequest struct {
	// Name The name of the book
	Name string `json:"name"`
}

// UserResponse defines model for UserResponse.
type UserResponse struct {
	// CreatedAt The timestamp when the user was created
	CreatedAt time.Time `json:"created_at"`

	// Email The email of the user
	Email openapi_types.Email `json:"email"`

	// FirstName The first name of the user
	FirstName string `json:"first_name"`

	// Id The unique identifier for the user
	Id openapi_types.UUID `json:"id"`

	// LastName The last name of the user
	LastName string `json:"last_name"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Errors A list of specific field validation errors
	Errors []FieldError `json:"errors"`

	// Message A human-readable summary of the overall error
	Message string `json:"message"`
}

// VerifyEmailRequest defines model for VerifyEmailRequest.
type VerifyEmailRequest struct {
	// Email The email address to be verified
	Email openapi_types.Email `json:"email"`

	// VerificationCode The 6-digit verification code received by the email
	VerificationCode string `json:"verification_code"`
}

// GetBooksParams defines parameters for GetBooks.
type GetBooksParams struct {
	Name     *string `form:"name,omitempty" json:"name,omitempty"`
	Page     *int    `form:"page,omitempty" json:"page,omitempty"`
	PageSize *int    `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// PostAuthLoginJSONRequestBody defines body for PostAuthLogin for application/json ContentType.
type PostAuthLoginJSONRequestBody = LoginRequest

// PostAuthRegistrationJSONRequestBody defines body for PostAuthRegistration for application/json ContentType.
type PostAuthRegistrationJSONRequestBody = RegistrationRequest

// PostAuthResendCodeJSONRequestBody defines body for PostAuthResendCode for application/json ContentType.
type PostAuthResendCodeJSONRequestBody = ResendCodeRequest

// PostAuthVerifyEmailJSONRequestBody defines body for PostAuthVerifyEmail for application/json ContentType.
type PostAuthVerifyEmailJSONRequestBody = VerifyEmailRequest

// PostBooksJSONRequestBody defines body for PostBooks for application/json ContentType.
type PostBooksJSONRequestBody = CreateBookRequest

// PutBooksIdJSONRequestBody defines body for PutBooksId for application/json ContentType.
type PutBooksIdJSONRequestBody = UpdateBookRequest

// PostTokenRefreshJSONRequestBody defines body for PostTokenRefresh for application/json ContentType.
type PostTokenRefreshJSONRequestBody = TokenRefreshRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Log in a user
	// (POST /auth/login)
	PostAuthLogin(w http.ResponseWriter, r *http.Request)
	// Register a new user
	// (POST /auth/registration)
	PostAuthRegistration(w http.ResponseWriter, r *http.Request)
	// Resend email verification code
	// (POST /auth/resend-code)
	PostAuthResendCode(w http.ResponseWriter, r *http.Request)
	// Verify user email address
	// (POST /auth/verify-email)
	PostAuthVerifyEmail(w http.ResponseWriter, r *http.Request)
	// Retrieve all books that belongs to the user
	// (GET /books)
	GetBooks(w http.ResponseWriter, r *http.Request, params GetBooksParams)
	// Create a new book
	// (POST /books)
	PostBooks(w http.ResponseWriter, r *http.Request)
	// Delete a specific book that belongs to the user by ID
	// (DELETE /books/{id})
	DeleteBooksId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Get a specific book that belongs to the user by ID
	// (GET /books/{id})
	GetBooksId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Update a specific book that belongs to the user by ID
	// (PUT /books/{id})
	PutBooksId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Refresh access token
	// (POST /token/refresh)
	PostTokenRefresh(w http.ResponseWriter, r *http.Request)
	// Get user profile by ID
	// (GET /users/{id})
	GetUsersId(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostAuthLogin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthLogin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthLogin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthRegistration operation middleware
func (siw *ServerInterfaceWrapper) PostAuthRegistration(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthRegistration(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthResendCode operation middleware
func (siw *ServerInterfaceWrapper) PostAuthResendCode(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthResendCode(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostAuthVerifyEmail operation middleware
func (siw *ServerInterfaceWrapper) PostAuthVerifyEmail(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthVerifyEmail(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBooks operation middleware
func (siw *ServerInterfaceWrapper) GetBooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetBooksParams

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", r.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page_size", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooks(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostBooks operation middleware
func (siw *ServerInterfaceWrapper) PostBooks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostBooks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteBooksId operation middleware
func (siw *ServerInterfaceWrapper) DeleteBooksId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteBooksId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetBooksId operation middleware
func (siw *ServerInterfaceWrapper) GetBooksId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetBooksId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutBooksId operation middleware
func (siw *ServerInterfaceWrapper) PutBooksId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutBooksId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostTokenRefresh operation middleware
func (siw *ServerInterfaceWrapper) PostTokenRefresh(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostTokenRefresh(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       *http.ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m *http.ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m *http.ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/auth/login", wrapper.PostAuthLogin)
	m.HandleFunc("POST "+options.BaseURL+"/auth/registration", wrapper.PostAuthRegistration)
	m.HandleFunc("POST "+options.BaseURL+"/auth/resend-code", wrapper.PostAuthResendCode)
	m.HandleFunc("POST "+options.BaseURL+"/auth/verify-email", wrapper.PostAuthVerifyEmail)
	m.HandleFunc("GET "+options.BaseURL+"/books", wrapper.GetBooks)
	m.HandleFunc("POST "+options.BaseURL+"/books", wrapper.PostBooks)
	m.HandleFunc("DELETE "+options.BaseURL+"/books/{id}", wrapper.DeleteBooksId)
	m.HandleFunc("GET "+options.BaseURL+"/books/{id}", wrapper.GetBooksId)
	m.HandleFunc("PUT "+options.BaseURL+"/books/{id}", wrapper.PutBooksId)
	m.HandleFunc("POST "+options.BaseURL+"/token/refresh", wrapper.PostTokenRefresh)
	m.HandleFunc("GET "+options.BaseURL+"/users/{id}", wrapper.GetUsersId)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ziI1rS0uFv8EAAD///Ftcv20RgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
