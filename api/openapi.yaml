openapi: 3.0.3
info:
  title: Books REST API
  description: The REST API specification for books
  version: 1.0.0
servers:
  - url: 'http://127.0.0.1:4000/v1'
    description: Development server
tags:
  - name: Auth
    description: User registration, login and token management
  - name: Books
    description: Operations related to books
  - name: UserManagement
    description: Operations related to user profiles
paths:
  /auth/registration:
    post:
      summary: Register a new user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegistrationRequest"
      responses:
        201:
          description: User registered successfully
          headers:
            Location:
              description: The URI of the newly created user
              schema:
                type: string
                format: uri
                example: /users/40e6215d-b5c6-4896-987c-f30f3678f608
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        400:
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: User with this email already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /auth/verify-email:
    post:
      summary: Verify user email address
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/VerifyEmailRequest"
      responses:
        200:
          description: Email successfully verified. Account is now active
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully. Your account is now active."
        400:
          description: Invalid request (e.g malformed input)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        422:
          description: Failed validation (e.g code not 6-digits)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        404:
          description: User with the provided email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "User with email johndoe@example.com not found"
        409:
          description: Email already verified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Email address already verified"

  /auth/login:
    post:
      summary: Log in a user
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        200:
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          description: Invalid input provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

        422:
          description: Failed validation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ValidationError"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /token/refresh:
    post:
      summary: Refresh access token
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TokenRefreshRequest"
      responses:
        200:
          description: New access token (and optionally refresh token) issued
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenResponse"
        400:
          description: Invalid request (e.g Missing refresh token)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Invalid request: refresh_token is required"
        401:
          description: Unauthorized (e.g Refresh token is expired)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized: Refresh token is invalid or expired"
  /users/{id}:
    get:
      summary: Get user profile by ID
      tags:
        - UserManagement
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
          description: The unique ID of the user to retrieve
          example: 40e6215d-b5c6-4896-987c-f30f3678f608
      security:
        - BearerAuth: [ ]
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        401:
          description: Unauthorized (e.g No token provided or token is invalid/expired)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "Unauthorized: Access token missing or invalid"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                message: "User with ID 40e6215d-b5c6-4896-987c-f30f3678f608 not found"


components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      description: Enter the access token in the format 'Bearer <token>'
  schemas:
    RegistrationRequest:
      type: object
      required:
        - first_name
        - last_name
        - email
        - password
      properties:
        first_name:
          type: string
          description: The first name of the user
          example: John
        last_name:
          type: string
          description: The last name of the user
          example: Doe
        email:
          type: string
          description: The email address of the user
          example: johndoe@example.com
          format: email
        password:
          type: string
          format: password
          description: The password of the user
    UserResponse:
      type: object
      required:
        - id
        - first_name
        - last_name
        - email
        - created_at
      properties:
        id:
          type: string
          format: uuid
          description: The unique identifier for the user
          example: 40e6215d-b5c6-4896-987c-f30f3678f608
        first_name:
          type: string
          description: The first name of the user
          example: John
        last_name:
          type: string
          description: The last name of the user
          example: Doe
        email:
          type: string
          format: email
          description: The email of the user
          example: johndoe@example.com
        created_at:
          type: string
          format: date-time
          description: The timestamp when the user was created
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: The email address of the user
          example: johndoe@example.com
        password:
          type: string
          format: password
          description: The password of the user
    TokenResponse:
      type: object
      required:
        - access_token
        - refresh_token
        - token_type
        - expires_in
      properties:
        access_token:
          type: string
          description: The access token used for accessing protected resources
        refresh_token:
          type: string
          description: The refresh token used to obtain new access token
        token_type:
          type: string
          description: The type of token issued
          example: Bearer
        expires_in:
          type: integer
          description: The lifetime in seconds of the access token
          example: 3600
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string
          description: A human-readable error message
          example: Invalid input provided
    ValidationError:
      type: object
      required:
        - message
        - errors
      properties:
        message:
          type: string
          description: A human-readable summary of the overall error
          example: Invalid data provided for registration
        errors:
          type: array
          description: A list of specific field validation errors
          items:
            $ref: '#/components/schemas/FieldError'
    FieldError:
      type: object
      required:
        - message
        - field
      properties:
        message:
          type: string
          description: The specific error message for the field
          example: must be provided
        field:
          type: string
          description: The name of the field that caused the validation error
          example: last_name
    TokenRefreshRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
          description: The refresh token obtained during initial login or previous refresh
    VerifyEmailRequest:
      type: object
      required:
        - email
        - verification_code
      properties:
        email:
          type: string
          format: email
          description: The email address to be verified
          example: johndoe@example.com
        verification_code:
          type: string
          description: The 6-digit verification code received by the email
          pattern: '^\d{6}$'
          example: "129065"