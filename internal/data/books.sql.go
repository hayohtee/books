// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: books.sql

package data

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createBook = `-- name: CreateBook :one
INSERT INTO books(user_id, name)
VALUES ($1, $2)
RETURNING id, created_at, updated_at
`

type CreateBookParams struct {
	UserID uuid.UUID
	Name   string
}

type CreateBookRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateBook(ctx context.Context, arg CreateBookParams) (CreateBookRow, error) {
	row := q.db.QueryRowContext(ctx, createBook, arg.UserID, arg.Name)
	var i CreateBookRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const deleteBook = `-- name: DeleteBook :exec
DELETE
FROM books
WHERE id = $1
  AND user_id = $2
`

type DeleteBookParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBook(ctx context.Context, arg DeleteBookParams) error {
	_, err := q.db.ExecContext(ctx, deleteBook, arg.ID, arg.UserID)
	return err
}

const getBook = `-- name: GetBook :one
SELECT id, user_id, name, created_at, updated_at, version
FROM books
WHERE id = $1
`

func (q *Queries) GetBook(ctx context.Context, id uuid.UUID) (Book, error) {
	row := q.db.QueryRowContext(ctx, getBook, id)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const listBookForUser = `-- name: ListBookForUser :many
SELECT count(*) OVER () AS total_records,
       id,
       user_id,
       name,
       created_at,
       updated_at
FROM books
WHERE user_id = $1
  AND (to_tsvector('simple', name) @@ plainto_tsquery('simple', $2) OR $2 = '')
ORDER BY name
LIMIT $3 OFFSET $4
`

type ListBookForUserParams struct {
	UserID         uuid.UUID
	PlaintoTsquery string
	Limit          int32
	Offset         int32
}

type ListBookForUserRow struct {
	TotalRecords int64
	ID           uuid.UUID
	UserID       uuid.UUID
	Name         string
	CreatedAt    time.Time
	UpdatedAt    time.Time
}

func (q *Queries) ListBookForUser(ctx context.Context, arg ListBookForUserParams) ([]ListBookForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listBookForUser,
		arg.UserID,
		arg.PlaintoTsquery,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListBookForUserRow
	for rows.Next() {
		var i ListBookForUserRow
		if err := rows.Scan(
			&i.TotalRecords,
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBook = `-- name: UpdateBook :one
UPDATE books
SET name       = $1,
    updated_at = now(),
    version    = version + 1
WHERE id = $2
  AND version = $3
  AND user_id = $4
RETURNING id, user_id, name, created_at, updated_at, version
`

type UpdateBookParams struct {
	Name    string
	ID      uuid.UUID
	Version int32
	UserID  uuid.UUID
}

func (q *Queries) UpdateBook(ctx context.Context, arg UpdateBookParams) (Book, error) {
	row := q.db.QueryRowContext(ctx, updateBook,
		arg.Name,
		arg.ID,
		arg.Version,
		arg.UserID,
	)
	var i Book
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
